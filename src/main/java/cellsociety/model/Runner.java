package cellsociety.model;

import cellsociety.model.core.Cell;
import cellsociety.model.neighborhood.AdjacentNeighborhood;
import cellsociety.model.neighborhood.CardinalNeighborhood;
import cellsociety.model.simulation.FireSimulation;
import cellsociety.model.simulation.GameOfLifeSimulation;
import cellsociety.model.simulation.PercolationSimulation;
import cellsociety.model.simulation.SchellingSimulation;
import cellsociety.model.simulation.Simulation;
import cellsociety.model.simulation.WatorSimulation;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

public class Runner {

  public static void main(String[] args) {

  Integer[] arrLife = {0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,1,0,0,0,0,0,0,0,0,0,
     1,0,1,0,0,0,0,0,0,0,0,0,
     0,1,1,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,
     0,0,0,0,0,0,0,0,0,0,0,0,
};

    Integer[] arrFire = {
        0, 0, 0 ,0, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0 ,0, 1, 1, 1, 1, 1, 1, 1, 1,
        0, 0, 0 ,0, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 2,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 0, 0,
        1, 1, 1, 1, 1, 0, 0, 1, 1, 0, 0, 1,
        1, 1, 1, 1, 1, 0, 0, 1, 1, 1, 1, 1,
        1, 1, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0
    };

    // fire test


     Integer[] arrPerc = {0,0,0,0,0,0,0,0,0,0,0,0,
         1, 2, 0, 0, 2, 2, 0, 2, 2, 2, 2, 2,
     0, 0, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2,
     2, 2, 0, 2, 0, 0, 2, 2, 2, 2, 2, 2,
     2, 0, 0, 2, 0, 2, 2, 0, 2, 2, 2, 2,
     0, 2, 0, 0, 2, 0, 0, 2, 2, 2, 2, 2,
     2, 2, 2, 0, 2, 2, 0, 0, 2, 2, 2, 2,
     2, 0, 0, 0, 2, 2, 2, 0, 2, 2, 2, 2,
     0, 0, 2, 2, 2, 0, 0, 0, 2, 2, 2, 2,
     2, 2, 2, 2, 2, 2, 2, 2, 0, 2, 2, 2,
     0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,
     0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2,
     0, 0, 0, 0, 0, 0, 0, 0, 2, 2, 2, 2};



     Integer[] arrSchelling = {
     1,2,0,2,2,2,0,0,0,2,0,1,0,2,1,2,1,1,2,2,2,2,1,0,1,1,2,0,2,0,1,1,1,0,1,0,1,1,1,0,1,2,2,0,0,1,2,1,0,0,0,1,1,2,2,1,1,2,0,0,2,0,2,1,1,1,2,2,1,0,0,0,2,1,0,0,0,1,0,2,2,1,1,2,2,1,1,0,2,0,2,2,0,2,2,2,0,0,2,1,2,2,2,2,0,0,1,2,0,0,2,1,0,1,0,0,2,0,1,2,2,2,0,2,1,0,1,0,0,2,1,2,0,0,0,2,1,0,2,1,2,0,2,1,1,2,1,1,0,2,2,0,2,1,1,2,2,0,0,1,2,2,1,2,0,1,0,1,2,1,1,1,0,0,1,2,2,0,1,2,0,0,2,0,1,0,1,1,0,2,2,0,2,1,1,2,1,0,1,2,2,2,0,0,0,2,2,0,1,1,2,0,2,0,1,2,2,2,0,2,2,2,1,2,2,1,2,1,0,0,0,2,0,0,0,2,1,2,0,1,0,1,0,0,1,0,0,1,0,1,0,0,1,2,2,2,2,1,1,0,2,1,2,2,0,1,1,1,1,1,1,2,1,1,0,1,0,0,0,2,1,2,2,2,1,2,2,2,0,1,1,1,0,0,2,0,2,0,1,0,0,1,2,1,0,2,2,2,2,2,1,1,0,2,0,1,2,1,1,1,1,2,0,2,0,1,1,0,1,0,0,0,1,0,1,2,2,0,1,2,0,0,2,2,2,0,0,2,2,0,1,2,2,2,0,1,2,0,2,1,2,1,0,2,0,0,1,0,0,0,0,1,1,1,0,0,2,0,2,0,2,2,2,0,0,2,2,1,1,2,2,0,0,2,2,0,0,1,2,0,2,0,2,2,0,0,2,0,2,1,0,2,0,0,2,0,2,1,0,2,2,2,2,0,0,0,0,1,2,0,1,2,2,1,2,1,2,0,0,0,2,1,2,0,2,2,2,0,0,0,1,0,0,0,2,0,2,1,2,2,2,2,1,0,1,2,2,1,1,0,2,1,1,0,0,1,2,0,0,1,2,1,1,2,2,2,1,0,1,2,0,0,0,2,2,1,2,1,0,2,2,1,0,0,1,1,1,0,0,2,1,1,1,1,1,0,1,2,2,1,0,0,0,1,2,1,2,2,0,1,0,0,2,0,0,0,1,2,2,2,0,2,1,2,2,0,1,1,2,0,1,2,2,1,0,2,2,2,1,2,2,1,1,0,1,0,2,2,0,0,1,0,0,2,2,2,0,1,0,1,1,2,2,2,2,2,2,2,2,2,2,0,0,1,0,0,1,1,2,2,1,1,2,0,2,2,1,0,1,1,2,2,2,0,2,0,2,1,1,1,0,2,0,2,2,1,2,1,2,1,2,1,2,2,2,2,2,1,0,0,0,1,2,2,0,0,1,1,2,2,0,2,2,0,0,2,0,2,2,1,0,2,2,1,2,2,2,0,2,0,0,2,2,2,2,1,0,1,0,1,2,1,2,1,2,1,1,1,2,1,1,2,1,0,2,0,2,0,0,0,2,2,0,2,2,0,1,0,2,1,2,2,2,1,2,2,0,1,1,2,0,2,1,1,0,1,2,1,1,0,1,2,0,1,2,0,1,2,1,1,1,1,1,0,2,0,2,0,0,1,0,0,0,1,1,1,0,0,0,0,1,1,1,0,1,0,0,0,1,0,1,0,2,2,2,1,2,0,2,0,1,1,0,0,2,1,1,1,1,1,2,1,0,1,1,2,1,0,1,1,2,1,1,1,1,0,1,1,1,1,2,1,1,0,0,0,1,0,1,0,1,0,2,0,0,1,2,2,2,1,0,0,2,1,1,2,0,2,2,2,2,0,2,2,0,0,2,2,2,0,2,2,2,2,1,2,1,2,2,1,1,1,1,2,0,0,2,1,1,1,2,0,2,0,0,0,0,0,1,1,1,0,2,2,0,0,0,2,0,0,2,2,1,0,0,0,0,2,1,2,0,2,0,0,1,0,0,0,1,0,2,2,2,2,2,2,2,1,1,2,2,1,0,2,2,2,2,0,0,2,2,1,2,0,1,1,2,0,1,1,0,1,0,0,0,1,2,2,1,2,2,0,1,1,0,2,0,0,0,2,1,0,0,0,1,1,2,1,1,1,2,1,0,1,2,1,0,0,1,0,0,2,0,0,0,2,1,0,2,0,1,1,1,2,1,2,2,2,2,2,2,1,1,2,0,2,2,1,1,0,1,1,1,2,2,2,0,2,0,2,1,1,1,0,2,1,0,0,1,2,1,1,1,2,0,1,1,2,2,1,2,1,1,0,0,0,0,1,0,2,2,1,2,2,2,1,0,2,1,2,0,2,2,1,0,2,0,2,2,1,1,1,1,2,0,2,2,1,1,0,0,1,1,2,2,0,0,2,0,2,0,0,0,0,2,1,0,0,1,1,0,0,0,0,2,0,2,1,1,0,2,2,2,0,1,0,1,0,0,1,2,0,0,1,2,1,2,0,1,1,2,1,1,0,1,2,1,2,2,0,2,2,0,0,1,0,1,0,2,1,0,0,1,0,2,0,2,0,0,1,2,0,2,0,2,0,2,0,1,2,0,2,1,0,0,2,1,0,2,1,2,2,2,2,1,2,2,0,2,1,2,2,1,0,2,0,2,1,2,1,1,0,0,1,2,0,0,0,0,2,1,2,2,0,0,0,0,0,2,0,2,2,1,1,2,1,2,2,0,2,1,1,0,1,2,1,0,0,2,2,0,2,0,2,2,0,1,0,0,0,0,2,2,0,1,0,2,0,2,2,2,1,1,0,2,2,1,2,0,2,2,1,2,1,2,0,1,0,1,1,0,2,0,1,1,0,2,1,2,2,0,2,1,0,0,2,0,2,1,1,1,0,1,1,0,0,0,2,0,2,2,1,2,2,2,2,1,2,0,1,1,2,0,0,0,1,1,2,0,1,2,1,1,0,0,2,0,1,1,0,1,2,2,1,2,0,0,1,1,2,1,0,2,2,1,0,0,1,0,0,1,0,2,1,0,0,2,1,2,1,2,1,1,0,2,2,0,1,1,2,2,1,0,1,0,0,1,2,2,2,1,1,1,2,2,0,1,2,1,0,1,0,2,2,1,0,2,1,2,2,1,0,2,1,1,1,1,1,1,0,2,0,1,0,1,1,1,1,2,1,0,0,1,0,1,2,1,2,1,0,0,1,2,1,2,2,1,2,2,2,2,1,1,0,0,0,2,1,2,1,0,1,0,1,0,0,0,1,2,0,2,1,2,0,1,1,1,0,1,1,0,0,1,0,2,1,1,0,0,0,2,2,1,1,0,1,2,0,2,1,0,2,1,0,0,1,0,1,2,2,0,2,2,2,0,1,1,0,2,2,0,2,0,0,2,2,1,1,0,0,1,2,0,2,1,2,1,1,0,1,1,2,2,0,2,0,2,0,1,1,1,1,1,0,0,0,0,2,1,0,2,2,2,1,1,0,0,1,2,1,2,0,0,1,1,1,0,2,1,0,0,0,2,0,1,1,0,0,0,0,1,0,0,2,2,1,0,2,0,0,1,1,0,1,1,0,2,2,1,2,0,0,2,2,0,0,1,0,1,2,0,0,2,0,1,0,0,1,0,2,1,0,2,1,0,1,2,2,2,2,0,0,2,1,1,2,0,1,1,0,2,1,0,1,0,0,2,2,0,2,0,2,0,2,2,2,2,1,2,1,2,1,0,1,1,1,2,1,1,2,0,2,0,2,2,0,2,0,1,0,2,2,2,0,1,1,0,1,2,2,2,1,0,1,2,0,1,0,0,1,2,0,0,1,2,1,1,1,0,0,0,0,1,1,2,2,1,0,0,1,0,2,2,1,2,2,1,1,0,2,0,0,0,1,1,2,2,1,1,0,0,2,2,0,2,0,1,2,0,2,0,2,2,0,2,2,2,2,2,1,1,2,1,1,1,1,1,2,2,0,2,2,0,1,0,0,1,2,1,2,2,2,2,2,2,0,0,2,0,0,2,2,2,0,2,0,1,1,1,0,0,2,1,0,2,1,2,2,2,1,2,1,1,0,1,1,1,0,0,1,0,2,0,0,1,0,1,1,0,1,1,2,2,2,1,2,1,2,2,0,1,0,1,1,1,2,1,2,0,0,1,1,0,2,0,2,2,1,0,1,1,0,1,2,2,2,2,2,2,0,0,1,0,2,2,1,2,1,0,0,1,1,1,2,0,1,2,1,1,2,0,1,1,2,0,0,0,0,0,1,2,2,0,1,2,1,1,2,2,2,2,0,2,2,1,1,2,1,2,0,2,1,0,0,0,2,0,2,1,0,0,1,1,1,0,1,0,0,0,2,1,1,2,2,2,0,1,2,0,0,0,2,0,0,2,1,0,0,1,2,0,2,0,1,0,2,0,1,0,2,1,2,0,0,2,0,1,1,1,1,1,2,2,0,0,2,1,0,1,2,2,2,1,1,2,1,0,1,2,1,0,2,1,1,1,1,2,0,0,1,2,1,2,0,1,0,0,0,1,1,1,0,1,2,1,2,1,1,0,0,1,2,1,1,1,0,1,1,1,1,2,1,0,2,0,1,2,1,0,0,1,0,2,2,2,2,2,2,1,2,0,2,2,1,1,0,0,1,0,1,2,0,0,0,1,1,0,0,0,0,1,0,1,2,1,1,0,0,2,0,2,1,1,1,2,0,0,2,2,0,0,1,1,2,2,1,0,2,0,1,0,0,2,1,1,0,1,0,2,2,1,0,2,0,0,1,0,0,1,2,2,0,0,0,0,0,2,0,1,2,1,2,1,0,1,0,1,1,1,2,0,0,2,1,2,1,0,0,0,2,1,2,1,0,1,1,1,2,2,2,0,0,2,1,1,1,1,2,0,2,0,1,2,0,0,2,2,2,0,0,2,2,0,1,2,1,0,0,2,1,1,2,1,1,1,1,2,2,1,1,0,1,0,1,0,0,0,0,1,1,0,0,1,2,2,2,2,1,1,0,2,1,2,2,0,2,0,0,0,2,0,2,0,1,0,2,2,2,1,2,2,1,0,2,0,1,0,2,0,2,1,2,0,1,2,0,1,0,2,1,0,1,2,1,0,0,2,2,1,1,0,2,0,1,0,2,1,2,1,2,0,0,0,1,0,0,0,0,2,0,2,2,1,2,1,1,2,2,0,0,2,1,2,0,0,2,1,1,2,1,2,2,0,1,2,1,0,2,0,2,2,1,1,2,0,0,2,2,1,0,1,0,1,0,0,1,0,1,1,2,1,1,1,2,1,2,0,1,2,1,2,0,2,0,2,2,1,0,0,1,2,2,2,2,1,2,1,0,1,1,0,1,2,2,2,1,2,2,0,2,2,1,0,1,0,0,0,1,2,2,0,0,1,1,1,1,1,0,2,2,1,2,1,2,2,0,1,0,1,0,0,1,2,0,2,2,0,0,1,2,0,0,2,2,0,0,0,2,1,0,1,2,0,1,1,0,2,2,0,0,1,1,2,1,0,1,1,1,2,0,0,2,1,2,2,0,1,2,0,1,0,2,2,2,0,2,1,2,1,1,0,1,0,1,0,1,2,0,0,2};

     //schelling test



    Integer[] arrWator = {
        0,0,0,0,2,0,
        1,1,1,0,0,0,
        0,0,0,0,0,0,
        0,2,2,2,0,0,
        0,0,0,0,0,0,
        1,1,1,0,0,0,
        1,1,1,0,0,0};


    //ALL OF THIS DATA SHOULD BE SENT FROM XML TO VIEW TO MODEL DIRECTLY

    List<Integer> lifeConfig = Arrays.asList(arrLife);
    List<Integer> fireConfig = Arrays.asList(arrFire);
    List<Integer> schellingConfig = Arrays.asList(arrSchelling);
    List<Integer> percolationConfig = Arrays.asList(arrPerc);
    List<Integer> watorConfig = Arrays.asList(arrWator);


    Simulation s1 = new GameOfLifeSimulation(6, 12, new AdjacentNeighborhood(),
        lifeConfig, 2,3,3,3);
    Simulation s2 = new FireSimulation(12, 12, new AdjacentNeighborhood(),
        fireConfig, 1, 0.0, .2);
    Simulation s3 = new SchellingSimulation(10, 10, new AdjacentNeighborhood(),
        schellingConfig, .5);
    Simulation s4 = new PercolationSimulation(13, 12, new AdjacentNeighborhood(),
        percolationConfig, 1);
    Simulation s5 = new WatorSimulation(7, 6, new CardinalNeighborhood(),
        watorConfig, 4, 8, 2, 4 );


    //REPLACE LINES 105,106 WITH SIMULATION OF UR CHOICE
    for (int i = 0; i < 15; i++) {
      s2.transitionFunction();
      s2.processUpdate();
      System.out.print("\n\n\n\n");
    }
  }


}
